{"ast":null,"code":"var _jsxFileName = \"/Users/drussian/Projects/dapp-test/packages/app/src/components/Balance.tsx\";\nimport React, { createContext, useState, useEffect } from 'react';\nimport { Message } from './Message';\nimport Token from '../models/Token'; // @ts-ignore\n\nimport socketIOClient from 'socket.io-client';\nexport const MessageContext = createContext({\n  show: false\n});\n\nconst Balance = () => {\n  const [token, setToken] = useState(new Token(''));\n  const [inputValue, setInputValue] = useState();\n  const [tokenMessage, setTokenMessage] = useState(false);\n  useEffect(() => {\n    socket.emit(\"message\", token.value);\n  }, [token]);\n  const [endpoint] = useState('http://127.0.0.1:7000');\n  const socket = socketIOClient(endpoint);\n  socket.on(\"message\", data => console.log(data));\n\n  const handleInputChange = e => {\n    setInputValue(e.currentTarget.value);\n  };\n\n  const checkToken = () => {\n    token.value = inputValue;\n    token.validate();\n    setTokenMessage(!token.valid);\n\n    if (token.valid) {\n      setToken(token);\n    }\n  };\n\n  const cleanToken = () => {\n    setInputValue('');\n    setToken(new Token());\n    socket.disconnect();\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"input\", {\n    type: \"text\",\n    value: inputValue,\n    onChange: handleInputChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"btn-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: 'btn btn-primary waves-effect waves-light',\n    onClick: checkToken,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Lookup\"), React.createElement(\"button\", {\n    className: 'btn btn-info waves-effect waves-light',\n    onClick: cleanToken,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Clean\")), React.createElement(Message, {\n    show: tokenMessage,\n    message: 'This token is not a valid ECR20 token.',\n    type: 'error',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }));\n};\n\nexport default Balance;","map":{"version":3,"sources":["/Users/drussian/Projects/dapp-test/packages/app/src/components/Balance.tsx"],"names":["React","createContext","useState","useEffect","Message","Token","socketIOClient","MessageContext","show","Balance","token","setToken","inputValue","setInputValue","tokenMessage","setTokenMessage","socket","emit","value","endpoint","on","data","console","log","handleInputChange","e","currentTarget","checkToken","validate","valid","cleanToken","disconnect"],"mappings":";AAAA,OAAOA,KAAP,IAAmCC,aAAnC,EAAkDC,QAAlD,EAA4DC,SAA5D,QAA6E,OAA7E;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAOC,KAAP,MAAkB,iBAAlB,C,CAEA;;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,OAAO,MAAMC,cAAc,GAAGN,aAAa,CAAC;AAAEO,EAAAA,IAAI,EAAE;AAAR,CAAD,CAApC;;AAQP,MAAMC,OAAyB,GAAG,MAAM;AACpC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAIG,KAAJ,CAAU,EAAV,CAAD,CAAlC;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,EAA5C;AACA,QAAM,CAACY,YAAD,EAAeC,eAAf,IAAkCb,QAAQ,CAAC,KAAD,CAAhD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,MAAM,CAACC,IAAP,CAAY,SAAZ,EAAuBP,KAAK,CAACQ,KAA7B;AACH,GAFQ,EAEN,CAACR,KAAD,CAFM,CAAT;AAIA,QAAM,CAACS,QAAD,IAAajB,QAAQ,CAAC,uBAAD,CAA3B;AAEA,QAAMc,MAAM,GAAGV,cAAc,CAACa,QAAD,CAA7B;AACAH,EAAAA,MAAM,CAACI,EAAP,CAAU,SAAV,EAAsBC,IAAD,IAAeC,OAAO,CAACC,GAAR,CAAYF,IAAZ,CAApC;;AAEA,QAAMG,iBAAiB,GAAIC,CAAD,IAAyC;AAC/DZ,IAAAA,aAAa,CAACY,CAAC,CAACC,aAAF,CAAgBR,KAAjB,CAAb;AACH,GAFD;;AAIA,QAAMS,UAAU,GAAG,MAAM;AACrBjB,IAAAA,KAAK,CAACQ,KAAN,GAAcN,UAAd;AACAF,IAAAA,KAAK,CAACkB,QAAN;AAEAb,IAAAA,eAAe,CAAC,CAACL,KAAK,CAACmB,KAAR,CAAf;;AAEA,QAAInB,KAAK,CAACmB,KAAV,EAAiB;AACblB,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACH;AACJ,GATD;;AAWA,QAAMoB,UAAU,GAAG,MAAM;AACrBjB,IAAAA,aAAa,CAAC,EAAD,CAAb;AACAF,IAAAA,QAAQ,CAAC,IAAIN,KAAJ,EAAD,CAAR;AAEAW,IAAAA,MAAM,CAACe,UAAP;AACH,GALD;;AAOA,SACI,0CACI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,KAAK,EAAEnB,UAA1B;AAAsC,IAAA,QAAQ,EAAEY,iBAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAGI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAQ,IAAA,SAAS,EAAE,0CAAnB;AAA+D,IAAA,OAAO,EAAEG,UAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEI;AAAQ,IAAA,SAAS,EAAE,uCAAnB;AAA4D,IAAA,OAAO,EAAEG,UAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFJ,CAHJ,EAQI,oBAAC,OAAD;AAAS,IAAA,IAAI,EAAEhB,YAAf;AAA6B,IAAA,OAAO,EAAE,wCAAtC;AAAgF,IAAA,IAAI,EAAE,OAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARJ,CADJ;AAYH,CAhDD;;AAkDA,eAAeL,OAAf","sourcesContent":["import React, { FunctionComponent, createContext, useState, useEffect } from 'react'\nimport { Message } from './Message'\nimport Token from '../models/Token'\n\n// @ts-ignore\nimport socketIOClient from 'socket.io-client'\n\nexport const MessageContext = createContext({ show: false });\n\ntype MessageProps = {\n    message: string\n    type: 'success' | 'info' | 'error'\n    show: boolean\n}\n\nconst Balance:FunctionComponent = () => {\n    const [token, setToken] = useState(new Token(''))\n    const [inputValue, setInputValue] = useState()\n    const [tokenMessage, setTokenMessage] = useState(false)\n\n    useEffect(() => {\n        socket.emit(\"message\", token.value);\n    }, [token])\n\n    const [endpoint] = useState('http://127.0.0.1:7000')\n\n    const socket = socketIOClient(endpoint);\n    socket.on(\"message\", (data: any) => console.log(data));\n\n    const handleInputChange = (e:React.FormEvent<HTMLInputElement>) => {\n        setInputValue(e.currentTarget.value)\n    }\n\n    const checkToken = () => {\n        token.value = inputValue\n        token.validate()\n\n        setTokenMessage(!token.valid)\n\n        if (token.valid) {\n            setToken(token)\n        }\n    }\n\n    const cleanToken = () => {\n        setInputValue('')\n        setToken(new Token())\n\n        socket.disconnect()\n    }\n\n    return (\n        <>\n            <input type=\"text\" value={inputValue} onChange={handleInputChange}/>\n\n            <div className=\"btn-group\">\n                <button className={'btn btn-primary waves-effect waves-light'} onClick={checkToken}>Lookup</button>\n                <button className={'btn btn-info waves-effect waves-light'} onClick={cleanToken}>Clean</button>\n            </div>\n\n            <Message show={tokenMessage} message={'This token is not a valid ECR20 token.'} type={'error'}/>\n        </>\n    )\n}\n\nexport default Balance\n"]},"metadata":{},"sourceType":"module"}