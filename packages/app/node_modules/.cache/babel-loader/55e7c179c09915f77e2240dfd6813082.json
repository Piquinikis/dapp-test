{"ast":null,"code":"var _jsxFileName = \"/Users/drussian/Projects/dapp-test/packages/app/src/components/Balance.tsx\";\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { Message } from './Message';\nimport Token from '../models/Token'; // @ts-ignore\n\nimport socketIOClient from 'socket.io-client';\nconst SocketIOContext = createContext({\n  url: 'http://127.0.0.1:7000'\n});\n\nconst Balance = () => {\n  const {\n    url\n  } = useContext(SocketIOContext);\n  const socket = socketIOClient(url);\n  const [token, setToken] = useState(new Token(''));\n  const [inputValue, setInputValue] = useState();\n  const [message, setMessage] = useState({\n    show: false,\n    text: '',\n    type: ''\n  });\n  useEffect(() => {\n    if (token.valid) {\n      setToken(token);\n      socket.emit(\"message\", token.value);\n      socket.on(\"message\", data => console.log(data));\n    } else {\n      setMessage({\n        show: true,\n        text: 'Wrong token',\n        type: 'error'\n      });\n    }\n  }, [token]);\n\n  const handleInputChange = e => {\n    setInputValue(e.currentTarget.value);\n  };\n\n  const checkToken = () => {\n    token.value = inputValue;\n    token.validate();\n  };\n\n  const cleanToken = () => {\n    setInputValue('');\n    setToken(new Token());\n    socket.disconnect();\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"input\", {\n    type: \"text\",\n    value: inputValue,\n    onChange: handleInputChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"btn-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: 'btn btn-primary waves-effect waves-light',\n    onClick: checkToken,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Lookup\"), React.createElement(\"button\", {\n    className: 'btn btn-info waves-effect waves-light',\n    onClick: cleanToken,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"Clean\")), React.createElement(Message, {\n    show: message.show,\n    message: message.text,\n    type: message.type,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }));\n};\n\nexport default Balance;","map":{"version":3,"sources":["/Users/drussian/Projects/dapp-test/packages/app/src/components/Balance.tsx"],"names":["React","createContext","useState","useEffect","useContext","Message","Token","socketIOClient","SocketIOContext","url","Balance","socket","token","setToken","inputValue","setInputValue","message","setMessage","show","text","type","valid","emit","value","on","data","console","log","handleInputChange","e","currentTarget","checkToken","validate","cleanToken","disconnect"],"mappings":"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","sourcesContent":["import React, {FunctionComponent, createContext, useState, useEffect, useContext} from 'react'\nimport { Message } from './Message'\nimport Token from '../models/Token'\n\n// @ts-ignore\nimport socketIOClient from 'socket.io-client'\n\nconst SocketIOContext = createContext({ url: 'http://127.0.0.1:7000' });\n\nconst Balance:FunctionComponent = () => {\n    const { url } = useContext(SocketIOContext)\n    const socket = socketIOClient(url);\n\n    const [token, setToken] = useState(new Token(''))\n    const [inputValue, setInputValue] = useState()\n    const [message, setMessage] = useState({ show:false, text: '', type: ''})\n\n    useEffect(() => {\n        if (token.valid) {\n            setToken(token)\n            socket.emit(\"message\", token.value);\n\n            socket.on(\"message\", (data: any) => console.log(data));\n        } else {\n            setMessage({\n                show: true,\n                text: 'Wrong token',\n                type: 'error'\n            })\n        }\n    }, [token])\n\n    const handleInputChange = (e:React.FormEvent<HTMLInputElement>) => {\n        setInputValue(e.currentTarget.value)\n    }\n\n    const checkToken = () => {\n        token.value = inputValue\n        token.validate()\n\n    }\n\n    const cleanToken = () => {\n        setInputValue('')\n        setToken(new Token())\n\n        socket.disconnect()\n    }\n\n    return (\n        <>\n            <input type=\"text\" value={inputValue} onChange={handleInputChange}/>\n\n            <div className=\"btn-group\">\n                <button className={'btn btn-primary waves-effect waves-light'} onClick={checkToken}>Lookup</button>\n                <button className={'btn btn-info waves-effect waves-light'} onClick={cleanToken}>Clean</button>\n            </div>\n\n            <Message show={message.show} message={message.text} type={message.type} />\n        </>\n    )\n}\n\nexport default Balance\n"]},"metadata":{},"sourceType":"module"}