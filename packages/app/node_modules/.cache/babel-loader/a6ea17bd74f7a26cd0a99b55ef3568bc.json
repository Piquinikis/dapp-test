{"ast":null,"code":"var _jsxFileName = \"/Users/drussian/Projects/dapp-test/packages/app/src/components/Balance.tsx\";\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { Message } from './Message';\nimport Token from '../models/Token'; // @ts-ignore\n\nimport socketIOClient from 'socket.io-client';\nexport const SocketIOContext = createContext({\n  url: 'http://127.0.0.1:7000'\n});\n\nconst Balance = () => {\n  const {\n    url\n  } = useContext(SocketIOContext);\n  const socket = socketIOClient(url);\n  const [token, setToken] = useState(new Token(''));\n  const [inputValue, setInputValue] = useState();\n  const [tokenMessage, setTokenMessage] = useState(false);\n  useEffect(() => {\n    socket.emit(\"message\", token.value);\n  }, [token]);\n\n  const handleInputChange = e => {\n    setInputValue(e.currentTarget.value);\n  };\n\n  const checkToken = () => {\n    token.value = inputValue;\n    token.validate();\n    setTokenMessage(!token.valid);\n\n    if (token.valid) {\n      setToken(token);\n      socket.on(\"message\", data => console.log(data));\n    }\n  };\n\n  const cleanToken = () => {\n    setInputValue('');\n    setToken(new Token());\n    socket.disconnect();\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"input\", {\n    type: \"text\",\n    value: inputValue,\n    onChange: handleInputChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"btn-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: 'btn btn-primary waves-effect waves-light',\n    onClick: checkToken,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Lookup\"), React.createElement(\"button\", {\n    className: 'btn btn-info waves-effect waves-light',\n    onClick: cleanToken,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Clean\")), React.createElement(Message, {\n    show: tokenMessage,\n    message: 'This token is not a valid ECR20 token.',\n    type: 'error',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }));\n};\n\nexport default Balance;","map":{"version":3,"sources":["/Users/drussian/Projects/dapp-test/packages/app/src/components/Balance.tsx"],"names":["React","createContext","useState","useEffect","useContext","Message","Token","socketIOClient","SocketIOContext","url","Balance","socket","token","setToken","inputValue","setInputValue","tokenMessage","setTokenMessage","emit","value","handleInputChange","e","currentTarget","checkToken","validate","valid","on","data","console","log","cleanToken","disconnect"],"mappings":";AAAA,OAAOA,KAAP,IAAkCC,aAAlC,EAAiDC,QAAjD,EAA2DC,SAA3D,EAAsEC,UAAtE,QAAuF,OAAvF;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAOC,KAAP,MAAkB,iBAAlB,C,CAEA;;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,OAAO,MAAMC,eAAe,GAAGP,aAAa,CAAC;AAAEQ,EAAAA,GAAG,EAAE;AAAP,CAAD,CAArC;;AAQP,MAAMC,OAAyB,GAAG,MAAM;AACpC,QAAM;AAAED,IAAAA;AAAF,MAAUL,UAAU,CAACI,eAAD,CAA1B;AACA,QAAMG,MAAM,GAAGJ,cAAc,CAACE,GAAD,CAA7B;AAEA,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,IAAII,KAAJ,CAAU,EAAV,CAAD,CAAlC;AACA,QAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,EAA5C;AACA,QAAM,CAACc,YAAD,EAAeC,eAAf,IAAkCf,QAAQ,CAAC,KAAD,CAAhD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,MAAM,CAACO,IAAP,CAAY,SAAZ,EAAuBN,KAAK,CAACO,KAA7B;AACH,GAFQ,EAEN,CAACP,KAAD,CAFM,CAAT;;AAIA,QAAMQ,iBAAiB,GAAIC,CAAD,IAAyC;AAC/DN,IAAAA,aAAa,CAACM,CAAC,CAACC,aAAF,CAAgBH,KAAjB,CAAb;AACH,GAFD;;AAIA,QAAMI,UAAU,GAAG,MAAM;AACrBX,IAAAA,KAAK,CAACO,KAAN,GAAcL,UAAd;AACAF,IAAAA,KAAK,CAACY,QAAN;AAEAP,IAAAA,eAAe,CAAC,CAACL,KAAK,CAACa,KAAR,CAAf;;AAEA,QAAIb,KAAK,CAACa,KAAV,EAAiB;AACbZ,MAAAA,QAAQ,CAACD,KAAD,CAAR;AAEAD,MAAAA,MAAM,CAACe,EAAP,CAAU,SAAV,EAAsBC,IAAD,IAAeC,OAAO,CAACC,GAAR,CAAYF,IAAZ,CAApC;AACH;AACJ,GAXD;;AAaA,QAAMG,UAAU,GAAG,MAAM;AACrBf,IAAAA,aAAa,CAAC,EAAD,CAAb;AACAF,IAAAA,QAAQ,CAAC,IAAIP,KAAJ,EAAD,CAAR;AAEAK,IAAAA,MAAM,CAACoB,UAAP;AACH,GALD;;AAOA,SACI,0CACI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,KAAK,EAAEjB,UAA1B;AAAsC,IAAA,QAAQ,EAAEM,iBAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAGI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAQ,IAAA,SAAS,EAAE,0CAAnB;AAA+D,IAAA,OAAO,EAAEG,UAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEI;AAAQ,IAAA,SAAS,EAAE,uCAAnB;AAA4D,IAAA,OAAO,EAAEO,UAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFJ,CAHJ,EAQI,oBAAC,OAAD;AAAS,IAAA,IAAI,EAAEd,YAAf;AAA6B,IAAA,OAAO,EAAE,wCAAtC;AAAgF,IAAA,IAAI,EAAE,OAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARJ,CADJ;AAYH,CAhDD;;AAkDA,eAAeN,OAAf","sourcesContent":["import React, {FunctionComponent, createContext, useState, useEffect, useContext} from 'react'\nimport { Message } from './Message'\nimport Token from '../models/Token'\n\n// @ts-ignore\nimport socketIOClient from 'socket.io-client'\n\nexport const SocketIOContext = createContext({ url: 'http://127.0.0.1:7000' });\n\ntype MessageProps = {\n    message: string\n    type: 'success' | 'info' | 'error'\n    show: boolean\n}\n\nconst Balance:FunctionComponent = () => {\n    const { url } = useContext(SocketIOContext)\n    const socket = socketIOClient(url);\n\n    const [token, setToken] = useState(new Token(''))\n    const [inputValue, setInputValue] = useState()\n    const [tokenMessage, setTokenMessage] = useState(false)\n\n    useEffect(() => {\n        socket.emit(\"message\", token.value);\n    }, [token])\n    \n    const handleInputChange = (e:React.FormEvent<HTMLInputElement>) => {\n        setInputValue(e.currentTarget.value)\n    }\n\n    const checkToken = () => {\n        token.value = inputValue\n        token.validate()\n\n        setTokenMessage(!token.valid)\n\n        if (token.valid) {\n            setToken(token)\n\n            socket.on(\"message\", (data: any) => console.log(data));\n        }\n    }\n\n    const cleanToken = () => {\n        setInputValue('')\n        setToken(new Token())\n\n        socket.disconnect()\n    }\n\n    return (\n        <>\n            <input type=\"text\" value={inputValue} onChange={handleInputChange}/>\n\n            <div className=\"btn-group\">\n                <button className={'btn btn-primary waves-effect waves-light'} onClick={checkToken}>Lookup</button>\n                <button className={'btn btn-info waves-effect waves-light'} onClick={cleanToken}>Clean</button>\n            </div>\n\n            <Message show={tokenMessage} message={'This token is not a valid ECR20 token.'} type={'error'}/>\n        </>\n    )\n}\n\nexport default Balance\n"]},"metadata":{},"sourceType":"module"}