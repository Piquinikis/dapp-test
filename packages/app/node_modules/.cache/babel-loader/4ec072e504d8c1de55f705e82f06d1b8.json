{"ast":null,"code":"var _jsxFileName = \"/Users/drussian/Projects/dapp-test/packages/app/src/components/Balance.tsx\";\nimport React, { createContext, useState, useContext } from 'react';\nimport { Message } from './Message';\nimport Socket from './../utils/Socket';\nimport Token from '../models/Token';\nconst SocketIOContext = createContext({\n  url: 'http://127.0.0.1:7000'\n});\n\nconst Balance = () => {\n  const {\n    url\n  } = useContext(SocketIOContext),\n        socket = new Socket(url);\n  const [token, setToken] = useState(new Token(''));\n  const [inputValue, setInputValue] = useState();\n  const [message, setMessage] = useState({\n    show: false,\n    text: '',\n    type: ''\n  });\n\n  const handleInputChange = e => {\n    setInputValue(e.currentTarget.value);\n  };\n\n  const checkToken = () => {\n    token.value = inputValue;\n    token.validate();\n\n    if (token.valid) {\n      setMessage({\n        show: true,\n        text: 'Connecting ...',\n        type: 'info'\n      });\n      setToken(token);\n      socket.emmit(\"message\", token.value);\n    } else {\n      setMessage({\n        show: true,\n        text: 'Wrong token format.',\n        type: 'error'\n      });\n    }\n  };\n\n  const cleanToken = () => {\n    setInputValue('');\n    setToken(new Token());\n    socket.disconnect();\n    setMessage({\n      show: true,\n      text: 'Disconnected from server.',\n      type: 'info'\n    });\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"input\", {\n    type: \"text\",\n    value: inputValue,\n    onChange: handleInputChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"btn-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: 'btn btn-primary waves-effect waves-light',\n    onClick: checkToken,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Lookup\"), React.createElement(\"button\", {\n    className: 'btn btn-info waves-effect waves-light',\n    onClick: cleanToken,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Clean\")), React.createElement(Message, {\n    show: message.show,\n    message: message.text,\n    type: message.type,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }));\n};\n\nexport default Balance;","map":{"version":3,"sources":["/Users/drussian/Projects/dapp-test/packages/app/src/components/Balance.tsx"],"names":["React","createContext","useState","useContext","Message","Socket","Token","SocketIOContext","url","Balance","socket","token","setToken","inputValue","setInputValue","message","setMessage","show","text","type","handleInputChange","e","currentTarget","value","checkToken","validate","valid","emmit","cleanToken","disconnect"],"mappings":"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","sourcesContent":["import React, {FunctionComponent, createContext, useState, useContext} from 'react'\nimport { Message } from './Message'\nimport Socket from './../utils/Socket'\nimport Token from '../models/Token'\n\nconst SocketIOContext = createContext({ url: 'http://127.0.0.1:7000' });\n\nconst Balance:FunctionComponent = () => {\n\n    const { url } = useContext(SocketIOContext),\n        socket = new Socket(url)\n\n    const [token, setToken] = useState(new Token(''))\n    const [inputValue, setInputValue] = useState()\n    const [message, setMessage] = useState({ show:false, text: '', type: ''})\n\n    const handleInputChange = (e:React.FormEvent<HTMLInputElement>) => {\n        setInputValue(e.currentTarget.value)\n    }\n\n    const checkToken = () => {\n        token.value = inputValue\n        token.validate()\n\n        if (token.valid) {\n            setMessage({\n                show: true,\n                text: 'Connecting ...',\n                type: 'info'\n            })\n\n            setToken(token)\n\n            socket.emmit(\"message\", token.value)\n        } else {\n            setMessage({\n                show: true,\n                text: 'Wrong token format.',\n                type: 'error'\n            })\n        }\n    }\n\n    const cleanToken = () => {\n        setInputValue('')\n        setToken(new Token())\n\n        socket.disconnect()\n\n        setMessage({\n            show: true,\n            text: 'Disconnected from server.',\n            type: 'info'\n        })\n    }\n\n    return (\n        <>\n            <input type=\"text\" value={inputValue} onChange={handleInputChange}/>\n\n            <div className=\"btn-group\">\n                <button className={'btn btn-primary waves-effect waves-light'} onClick={checkToken}>Lookup</button>\n                <button className={'btn btn-info waves-effect waves-light'} onClick={cleanToken}>Clean</button>\n            </div>\n\n            <Message show={message.show} message={message.text} type={message.type} />\n        </>\n    )\n}\n\nexport default Balance\n"]},"metadata":{},"sourceType":"module"}