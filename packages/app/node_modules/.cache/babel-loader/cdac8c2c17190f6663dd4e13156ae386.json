{"ast":null,"code":"var _jsxFileName = \"/Users/drussian/Projects/dapp-test/packages/app/src/components/Balance.tsx\";\nimport React, { useState } from 'react';\nimport { Message } from './Message';\nimport Token from '../models/Token'; // @ts-ignore\n\nimport socketIOClient from 'socket.io-client';\n\nconst Balance = () => {\n  const [token, setToken] = useState(new Token());\n  const [inputValue, setInputValue] = useState();\n  const [tokenMessage, setTokenMessage] = useState(false);\n  const [endpoint] = useState('http://127.0.0.1:7000');\n  const socket = socketIOClient(endpoint); // socket.on(\"message\", (data: any) => console.log(data));\n\n  const handleInputChange = e => {\n    setInputValue(e.currentTarget.value);\n  };\n\n  const checkToken = () => {\n    token.value = inputValue;\n    token.validate();\n    setTokenMessage(!token.valid);\n    setToken(token);\n    socket.emit(\"message\", token.value);\n  };\n\n  const cleanToken = () => {\n    setInputValue('');\n    setToken(new Token());\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"input\", {\n    type: \"text\",\n    value: inputValue,\n    onChange: handleInputChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: checkToken,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Lookup\"), React.createElement(\"button\", {\n    onClick: cleanToken,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Clean\"), React.createElement(Message, {\n    show: tokenMessage,\n    message: 'The entry token is not a valid ECR20 token',\n    type: 'error',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }));\n};\n\nexport default Balance;","map":{"version":3,"sources":["/Users/drussian/Projects/dapp-test/packages/app/src/components/Balance.tsx"],"names":["React","useState","Message","Token","socketIOClient","Balance","token","setToken","inputValue","setInputValue","tokenMessage","setTokenMessage","endpoint","socket","handleInputChange","e","currentTarget","value","checkToken","validate","valid","emit","cleanToken"],"mappings":";AAAA,OAAOA,KAAP,IAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAOC,KAAP,MAAkB,iBAAlB,C,CAEA;;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,MAAMC,OAAyB,GAAG,MAAM;AACpC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAIE,KAAJ,EAAD,CAAlC;AACA,QAAM,CAACK,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,EAA5C;AACA,QAAM,CAACS,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,KAAD,CAAhD;AAGA,QAAM,CAACW,QAAD,IAAaX,QAAQ,CAAC,uBAAD,CAA3B;AAEA,QAAMY,MAAM,GAAGT,cAAc,CAACQ,QAAD,CAA7B,CARoC,CASpC;;AAEA,QAAME,iBAAiB,GAAIC,CAAD,IAAyC;AAC/DN,IAAAA,aAAa,CAACM,CAAC,CAACC,aAAF,CAAgBC,KAAjB,CAAb;AACH,GAFD;;AAIA,QAAMC,UAAU,GAAG,MAAM;AACrBZ,IAAAA,KAAK,CAACW,KAAN,GAAcT,UAAd;AACAF,IAAAA,KAAK,CAACa,QAAN;AAEAR,IAAAA,eAAe,CAAC,CAACL,KAAK,CAACc,KAAR,CAAf;AACAb,IAAAA,QAAQ,CAACD,KAAD,CAAR;AAEAO,IAAAA,MAAM,CAACQ,IAAP,CAAY,SAAZ,EAAuBf,KAAK,CAACW,KAA7B;AACH,GARD;;AAUA,QAAMK,UAAU,GAAG,MAAM;AACrBb,IAAAA,aAAa,CAAC,EAAD,CAAb;AACAF,IAAAA,QAAQ,CAAC,IAAIJ,KAAJ,EAAD,CAAR;AACH,GAHD;;AAKA,SACI,0CACI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,KAAK,EAAEK,UAA1B;AAAsC,IAAA,QAAQ,EAAEM,iBAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAGI;AAAQ,IAAA,OAAO,EAAEI,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,EAII;AAAQ,IAAA,OAAO,EAAEI,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAJJ,EAMI,oBAAC,OAAD;AAAS,IAAA,IAAI,EAAEZ,YAAf;AAA6B,IAAA,OAAO,EAAE,4CAAtC;AAAoF,IAAA,IAAI,EAAE,OAA1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,CADJ;AAUH,CAxCD;;AA0CA,eAAeL,OAAf","sourcesContent":["import React, { FunctionComponent, useState } from 'react'\nimport { Message } from './Message'\nimport Token from '../models/Token'\n\n// @ts-ignore\nimport socketIOClient from 'socket.io-client'\n\nconst Balance:FunctionComponent = () => {\n    const [token, setToken] = useState(new Token())\n    const [inputValue, setInputValue] = useState()\n    const [tokenMessage, setTokenMessage] = useState(false)\n\n\n    const [endpoint] = useState('http://127.0.0.1:7000')\n\n    const socket = socketIOClient(endpoint);\n    // socket.on(\"message\", (data: any) => console.log(data));\n    \n    const handleInputChange = (e:React.FormEvent<HTMLInputElement>) => {\n        setInputValue(e.currentTarget.value)\n    }\n\n    const checkToken = () => {\n        token.value = inputValue\n        token.validate()\n\n        setTokenMessage(!token.valid)\n        setToken(token)\n\n        socket.emit(\"message\", token.value);\n    }\n\n    const cleanToken = () => {\n        setInputValue('')\n        setToken(new Token())\n    }\n\n    return (\n        <>\n            <input type=\"text\" value={inputValue} onChange={handleInputChange}/>\n\n            <button onClick={checkToken}>Lookup</button>\n            <button onClick={cleanToken}>Clean</button>\n\n            <Message show={tokenMessage} message={'The entry token is not a valid ECR20 token'} type={'error'}/>\n        </>\n    )\n}\n\nexport default Balance\n"]},"metadata":{},"sourceType":"module"}